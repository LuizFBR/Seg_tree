#include <iostream>
#include <bits/stdc++.h>

using namespace std;

typedef vector <int> vi;

class SegmentTree{
private: vi vect, segTree;
         int n;
         int left (int p) { return p << 1;}
         int right (int p) { return (p << 1) | 1;}
public:
    // function to build the tree
        SegmentTree()
        {
              segTree.resize(2*n);
              for ( int a = 0; a < n ; a++)
                    segTree[a + n] = vect[a];

              for ( int a = n - 1 ; a > 0; --a )
                    segTree[a] = segTree[left(a)] + segTree[right(a)];
        }
        void updateNode(int node, int idx, int start, int end, int val)
        {
              if (start == end)
              {
                    segTree[node] += val;
                    vect[idx] += val;
              }
              int mid = (start + end) / 2;
              if ( start <= idx && idx <= mid)
                    updateNode( left(node), idx, start, mid, val);
              else
                    updateNode( right(node), idx, mid + 1, end, val);

              segTree[node] = segTree[left(node)] + segTree[right(node)];
        }
        int query(int node, int l, int r, int start, int end)
        {
              if ( start > r || end < l)
                    return 0;
              if ( l <= start && r >= end )
                    return segTree[node];

              int mid = (start + end) / 2;

              int sum_leftHalf = query( left(node), l, r, start, mid);
              int sum_rightHalf = query( right(node), l, r, mid + 1, end);

              return sum_leftHalf + sum_rightHalf;
        }
        int minQuery(int node, int l, int r, int start, int end)
        {
              if ( start > r || end < l)
                    return INT_MAX;
              if ( l <= start && r >= end )
                    return segTree[node];

              int mid = (start + end) / 2;

              return min(minQuery(left(node), l, r, start, mid),
                         minQuery(right(node), l, r, mid + 1, end));
        }
};
